#pragma once
#include "BaseScene.h"
#include "SoldierObj.h"
#include "VisitorObj.h"
class MainGameScene :public BaseScene
{
public:
    void Init() override;
    void Update(float dt) override;
    void Render() override;
    void Release() override;
    void AddDayCount() { _DayCount += 1; }
private:
    std::vector<std::unique_ptr<SoldierObj>> _SoldierNpcs;

    
    std::vector<std::unique_ptr<VisitorObj>> _VisitorNpcs;

    UINT _DayCount=2;
};

//메인 게임에 해당하는 씬구조를 작성해야만함...
//업데이트 매니저랑 렌더매니저는 내가 작성한 씬에 대해서 업데이트를 호출하고?
//렌더를 호출하고?
//그런 역할의 매니저임...

// 씬매니저 -> 씬 ->업데이트/렌더 (흐름을가져가는 코드)
// 렌더매니저와 업데이트는 씬매니저가 골라준 씬에 대해서
// 메인에서 업데이트와 렌더작업을 이제 해주는것을 의미하게됨...
// 씬매니저는 진짜 지금 어떤씬을 호출해야해! 라는것을 알려주는거고
// 그거에 따라서 씬에있는 업데이트와 렌더 그리고 초기화 등등이 실행될텐데
// 그과정에서 메인에서 매번 호출하는것과 씬매니저가 다 하는것은 비합리적이기때문에
// 선택된 씬에서 렌더와 업데이트를 쓰는 게 매니저임

//지금 필요한건 백버퍼매니저가 아니라 메인에서 사용하고있는 버퍼를 그대로 끌어다가 사용해야하기때문에
//extern을 해서 사용을 해야함 그래야 정상적인 작업이가능하고 그래야 코드를 짜는데 무리가없다
//근데 extern만 한다고 되는게 아니고...

//일단 해결은 완료 되었음

//이제 씬 매니저의 역할을 정확히 해야할때임

//이게 씬매니저가 반환하는 해당씬에 대해서 업데이트와 렌더를 출력한다?
//그럼 이니셜라이즈랑 릴리즈는?
//2. 씬매니저가 해당하는 씬을 고르고 업데이트랑 렌더 그리고 이니셜라이즈를 호출해
//그러면이제 렌더매니저와 업데이트 매니저에 등록이 되겟지?
//그럼 거기에 쌓여있는 업데이트와 렌더들을 한번에 쭉 실행하는방식?
//근데 그게 렌더는 이해할수있는데 그러면 업데이트는? 어떤 방식으로 진행되어야해?
//그게 문제네...? 업데이트는 그냥 그대로 개별로 진행을 하는가 아니면 업데이트 매니저가
//그것을 보고 실행을하도록하는가
//3. 원래 내가하던고민 이제 씬매니저는 씬 전환과 그런것에 의미를두고
//씬에서 업데이트되는 내용 그리고 렌더된 내용들을 다...렌더 매니저와 업데이트매니저에게 이씬이니까
//이제 이씬에 업데이트를 호출해줄테니 너는 여기에 쌓여있는값을 실행해! 